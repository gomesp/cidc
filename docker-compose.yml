version: "2.2"

services:
  keycloak:
    build: keycloak
    image: ci-stack-keycloak
    ports:
      - 8280:8080
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Keycloak"
      - com.github.joostvdg.description="Single Sign On facility"
      - com.github.joostvdg.webPath=/
      - com.github.joostvdg.webPort=8280
    links:
      - postgres
    depends_on:
      - postgres
      - ldap
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_LOGLEVEL=DEBUG
      - DB_VENDOR=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=docker
      - POSTGRES_USER=docker
      - POSTGRES_PASSWORD=docker
      - POSTGRES_PORT_5432_TCP_ADDR=postgres
      - POSTGRES_PORT_5432_TCP_PORT=5432
    command: -b 0.0.0.0 -Dkeycloak.import=/tmp/realms/ci-realm-export.json
  
  docs:
    build: docs
    image: ci-stack-docs
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Docs"
      - com.github.joostvdg.description="User documentation"
      - com.github.joostvdg.webPath=/
      - com.github.joostvdg.webPort=8281
    ports:
      - 8281:80

  jenkins-light:
    build:
     context: ./jenkins
     dockerfile: Dockerfile.light
    image: ci-stack-jenkins-light
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Jenkins Master(light)"
      - com.github.joostvdg.description="Jenkins - CI/Build server"
      - com.github.joostvdg.webPath=/jenkins
      - com.github.joostvdg.webPort=8282
    environment:
      - HOSTNAME=${JENKINS_HOSTNAME:-localhost}
      - EXTERNAL_PORT=${JENKINS_EXTERNAL_PORT:-8282}
      - CONTEXT_ROOT=${JENKINS_CONTEXT_ROOT:-/jenkins}
      - SONAR_HOSTNAME=${SONAR_HOSTNAME:-sonar}
      - NEXUS_HOSTNAME=${NEXUS_HOSTNAME:-nexus}
    ports:
      - 8282:8080
      - 50000:50000
    volumes: ["jenkins_data_light:/var/jenkins_home"]

#      - THEME_CSS=https://tobix.github.io/jenkins-neo2-theme/dist/neo-dark.css

  jenkins-slave-light:
    image: vfarcic/jenkins-swarm-agent:18.04.01-1
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Jenkins Slave"
      - com.github.joostvdg.description="Slave with link to docker socket"
    depends_on:
      - jenkins-light
    environment:
      - COMMAND_OPTIONS=-master http://jenkins-light:8080/jenkins -labels 'docker' -executors 2 -password admin -username admin -name docker-slave
    volumes: ["jenkins_slave_workspace:/workspace", "/var/run/docker.sock:/var/run/docker.sock"]

  jenkins:
    build: jenkins
    image: ci-stack-jenkins
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Jenkins Master"
      - com.github.joostvdg.description="Jenkins - CI/Build server"
      - com.github.joostvdg.webPath=/jenkins
      - com.github.joostvdg.webPort=8282
    environment:
      - HOSTNAME=${JENKINS_HOSTNAME:-localhost}
      - EXTERNAL_PORT=${JENKINS_EXTERNAL_PORT:-8282}
      - CONTEXT_ROOT=${JENKINS_CONTEXT_ROOT:-/jenkins}
      - KEYCLOAK_HOSTNAME=${hostname:-localhost}
      - KEYCLOAK_PORT=${KEYCLOAK_PORT:-8280}
      - KEYCLOAK_HOSTNAME_SUFFIX=${KEYCLOAK_HOSTNAME_SUFFIX:-.solon.prd}
      - KEYCLOAK_HOSTNAME_LOWERCASE=${KEYCLOAK_HOSTNAME_LOWERCASE:-true}
      - SONAR_HOSTNAME=${SONAR_HOSTNAME:-sonar}
      - NEXUS_HOSTNAME=${NEXUS_HOSTNAME:-nexus}
      - THEME_CSS=https://tobix.github.io/jenkins-neo2-theme/dist/neo-light.css
    ports:
      - 8282:8080
      - 50000:50000
    volumes: ["jenkins_data:/var/jenkins_home"]

  jenkins-slave:
    image: vfarcic/jenkins-swarm-agent:18.02.12-10
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Jenkins Slave"
      - com.github.joostvdg.description="Slave with link to docker socket"
    depends_on:
      - jenkins
    environment:
      - COMMAND_OPTIONS=-master http://jenkins:8080/jenkins -labels 'docker' -executors 2
    volumes: ["jenkins_slave_workspace:/workspace", "/var/run/docker.sock:/var/run/docker.sock"]

  sonar:
    image: ci-stack-sonar
    build: sonar
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="SonarQube"
      - com.github.joostvdg.webPath=/sonar
      - com.github.joostvdg.webPort=8289
      - com.github.joostvdg.description="SonarQube - for software quality scan"
    ports:
      - 8289:9000    
    volumes: ["sonar_data:/opt/sonarqube/data"]
    command: -Dsonar.web.context=/sonar

  postgres:
    image: postgres:9.6.7
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Postgres"
      - com.github.joostvdg.description="Database for Keycloak"
    ports:    
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=docker
      - POSTGRES_USER=docker
      - POSTGRES_DB=docker
    volumes:
      - pg_data:/var/lib/postgresql/data

  pgadmin4:
    image: chorss/docker-pgadmin4
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="PGAdmin 4"
      - com.github.joostvdg.description="Web admin console for postgres"
      - com.github.joostvdg.webPath=/
      - com.github.joostvdg.webPort=5050
    depends_on:
      - postgres
    ports:
      - 5050:5050
    environment:
      - POSTGRES_PASSWORD=docker
      - POSTGRES_USER=docker
      - POSTGRES_DB=docker
    volumes:
      - pgadmin_data:/data

## Artifactory
# Default user: admin:password
  artifactory:                               
    image: docker.bintray.io/jfrog/artifactory-oss:latest
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Artifactory OSS"
      - com.github.joostvdg.description="Binary repository for development"
      - com.github.joostvdg.webPath=/artifactory
      - com.github.joostvdg.webPort=8285
    ports:
      - 8285:8081
    restart: always
    ulimits:
      nproc: 65535
      nofile:
        soft: 32000
        hard: 40000
    volumes: ["artifactory_data:/var/opt/jfrog/artifactory"]


  # Default Nexus 3 images is poor for mounting data
  # https://github.com/cavemandaveman/nexus
  # nexus:                               
  #   image: cavemandaveman/nexus:3.9.0-01
  #   labels:
  #     - com.github.joostvdg.namespace=cidc
  #     - com.github.joostvdg.name="Nexus 3"
  #     - com.github.joostvdg.description="Binary repository"
  #     - com.github.joostvdg.webPath=/nexus
  #     - com.github.joostvdg.webPort=8284
  #   ports:
  #     - 8284:8081
  #   volumes: ["nexus_data:/nexus-data"]

  portainer:
    image: portainer/portainer
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Portainer"
      - com.github.joostvdg.description="Admin console for Docker"
      - com.github.joostvdg.webPath=/
      - com.github.joostvdg.webPort=9000
    ports:
      - 9000:9000
    volumes: ["/var/run/docker.sock:/var/run/docker.sock","portainer_data:/data portainer/portainer"]

  ldap: 
    image: ci-stack-opendj 
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="OpenDJ"
      - com.github.joostvdg.description="LDAP server for user management"
    build: ldap 
    ports: 
      - 11389:1389 
      - 11636:1636 
      - 14444:4444

## Splunk
# https://hub.docker.com/r/splunk/splunk/
# admin / changeme
# Jenkins token: 806b2310-ced6-4693-b3e4-f81bd17f41e8
# we need to add "--answer-yes" due to upgrade stuff: https://github.com/splunk/docker-splunk/issues/21
  # splunk:
  #   image: splunk/splunk:7.0.0-monitor
  #   labels:
  #     - com.github.joostvdg.namespace=cidc
  #     - com.github.joostvdg.name="Splunk"
  #     - com.github.joostvdg.description="DevOps logging/dashboarding tool"
  #     - com.github.joostvdg.webPath=/
  #     - com.github.joostvdg.webPort=8287
  #   environment:
  #     - SPLUNK_START_ARGS=--accept-license --answer-yes
  #     - SPLUNK_USER=root
  #     - SPLUNK_ENABLE_LISTEN=9997
  #     - SPLUNK_ADD=tcp 1514
  #   depends_on:
  #     - registry
  #   ports: 
  #     - 8287:8000 
  #     - "9997:9997"
  #     - "8088:8088"
  #     - "1514:1514"
  #   volumes: ["opt-splunk-etc:/opt/splunk/etc","opt-splunk-var:/opt/splunk/var", "/var/run/docker.sock:/var/run/docker.sock"]

  service-listing: 
    image: cicd-sandbox-utilz:latest
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="CIDC Service Listing"
      - com.github.joostvdg.description="The container of this page"
    ports:
      - 7777:7777
    command: cicd-util -action serve -labelPrefix "com.github.joostvdg." -namespace "cidc" -siteTitle "CIDC Services"
    volumes: ["/var/run/docker.sock:/var/run/docker.sock"]

## Docker Registry
# https://docs.docker.com/registry/deploying
  registry: 
    image: registry:2
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Docker Registry"
      - com.github.joostvdg.description="Docker Registry by Docker"
    ports: 
      - 5000:5000

## Docker Registry UI
# https://hub.docker.com/r/konradkleine/docker-registry-frontend/
  registry-ui: 
    image: konradkleine/docker-registry-frontend:v2
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Docker Registry Frontend"
      - com.github.joostvdg.description="A UI for the docker registry"
      - com.github.joostvdg.webPath=/
      - com.github.joostvdg.webPort=8288
    environment:
      - ENV_DOCKER_REGISTRY_HOST=registry
      - ENV_DOCKER_REGISTRY_PORT=5000
    depends_on:
      - registry
    ports: 
      - 8288:80  

## OPEN PROJECT
# https://hub.docker.com/r/openproject/community/
# https://www.openproject.org/download-and-installation/#_ga=2.91403290.1635271910.1520803291-188908855.1520803291 
# Default user: admin:admin
# Current: K7xsR#jDG148#u%4
  # openproject: 
  #   image: openproject/community:7
  #   labels:
  #     - com.github.joostvdg.namespace=cidc
  #     - com.github.joostvdg.name="OpenProject"
  #     - com.github.joostvdg.description="Project Management system"
  #     - com.github.joostvdg.webPath=/
  #     - com.github.joostvdg.webPort=8290
  #   environment:
  #     - SECRET_KEY_BASE=youshouldoverwritethiswithsomethingelse
  #   ports:
  #     - 8290:80
  #   volumes: ["openprojectdb_data:/var/lib/postgresql/9.4/main", "openproject_data:/var/db/openproject"]

## Anchore
# For scanning docker images
# anchore/jenkins:latest

## ZAP Proxy
# https://github.com/zaproxy/zaproxy/wiki/Docker
  # zap-proxy: 
  #   image: owasp/zap2docker-stable
  #   labels:
  #     - com.github.joostvdg.namespace=cidc
  #     - com.github.joostvdg.name="ZAP Proxy"
  #     - com.github.joostvdg.description="The OWASP ZAP Proxy"
  #   ports: 
  #     - 8295:8080
  #   command: zap.sh -daemon -host 0.0.0.0 -port 8080
  #   # Starts in Headless mode
# Can also be added to your own pipeline like this:
#  docker run -i --rm --name zapcli --network appregister_default owasp/zap2docker-stable zap-cli quick-scan --self-contained  --start-options '-config api.disablekey=true' http://backend:8888

## Hashicorp Vaul
# https://github.com/docker-library/docs/tree/master/vault
# https://hub.docker.com/_/vault/
# NOTE: this runs in "development mode", as this is supposed to a developer's CICD Sandbox
# docker exec -ti cidc_vault_1 /bin/sh
# vault login (enter VAULT_DEV_ROOT_TOKEN_ID below)
# vault write secret/hello value=world
# https://www.vaultproject.io/intro/getting-started/first-secret.html
  vault: 
    image: vault:0.9.5
    cap_add:
      - IPC_LOCK
    labels:
      - com.github.joostvdg.namespace=cidc
      - com.github.joostvdg.name="Hashicorp Vault"
      - com.github.joostvdg.description="Secrets management system"
    ports:
      - 8299:8200
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=2Q2tvgz8Puqy1w9D
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://127.0.0.1:8200

volumes:
  sonar_data:
  nexus_data:
  jenkins_data_light:
  jenkins_data:
  jenkins_slave_workspace:
  artifactory_data:
  pgadmin_data:
  pg_data:
  portainer_data:
  openprojectdb_data:
  openproject_data:
  opt-splunk-etc:
  opt-splunk-var:
  anchore_data:
